// <auto-generated />
using System;
using Mamba.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mamba.Infra.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20200826004034_CorrecaoCnpj")]
    partial class CorrecaoCnpj
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mamba.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Bloqueado")
                        .HasColumnName("IND_BLOQUEADO")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnName("DAT_NASCIMENTO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .HasColumnName("NOM_ARQUIVO_FOTO")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LinkGithub")
                        .HasColumnName("DSC_LINK_GITHUB")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LinkLinkedin")
                        .HasColumnName("DSC_LINK_LINKEDIN")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MotivoBloqueio")
                        .HasColumnName("DSC_MOTIVO_BLOQUEIO")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOM_USUARIO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_AVALIACAO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aprovado")
                        .HasColumnName("IND_APROVADO")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DSC_AVALIACAO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnName("ID_FUNCIONARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Nota")
                        .HasColumnName("NUM_NOTA")
                        .HasColumnType("int");

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid>("RespostaId")
                        .HasColumnName("ID_RESPOSTA")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_AVALIACAO");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("RespostaId")
                        .IsUnique();

                    b.ToTable("AVALIACAO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Candidato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_CANDIDATO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnName("ID_USUARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnName("ID_ENDERECO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Profissao")
                        .IsRequired()
                        .HasColumnName("DSC_PROFISSAO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_CANDIDATO");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("CANDIDATO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_CARGO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnName("ID_EMPRESA")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOM_CARGO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_CARGO");

                    b.HasIndex("EmpresaId");

                    b.ToTable("CARGO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Desafio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_DESAFIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CargoId")
                        .HasColumnName("ID_CARGO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnName("DAT_ABERTURA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFechamento")
                        .HasColumnName("DAT_FECHAMENTO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DSC_DESAFIO")
                        .HasColumnType("NTEXT");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnName("ID_EMPRESA")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LimiteInscricao")
                        .HasColumnName("QTD_LIMITE_INSCRICAO")
                        .HasColumnType("int");

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnName("NOM_TITULO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_DESAFIO");

                    b.HasIndex("CargoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("DESAFIO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_EMPRESA")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("NUM_CNPJ")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnName("DSC_EMPRESA")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("EnderecoId")
                        .HasColumnName("ID_ENDERECO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logo")
                        .HasColumnName("NOM_ARQUIVO_LOGO")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOM_EMPRESA")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_EMPRESA");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("EMPRESA");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_ENDERECO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("NOM_BAIRRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnName("NUM_CEP")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnName("NOM_CIDADE")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Complemento")
                        .HasColumnName("DSC_COMPLEMENTO")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnName("SGL_ESTADO")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnName("DSC_LOGRADOURO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnName("NUM_ENDERECO")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_ENDERECO");

                    b.ToTable("ENDERECO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_FUNCIONARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnName("ID_USUARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CargoId")
                        .HasColumnName("ID_CARGO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_FUNCIONARIO");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CargoId");

                    b.ToTable("FUNCIONARIO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Inscricao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_INSCRICAO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Aprovado")
                        .HasColumnName("IND_APROVADO")
                        .HasColumnType("bit");

                    b.Property<Guid>("CandidatoId")
                        .HasColumnName("ID_CANDIDATO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFinalizacao")
                        .HasColumnName("DAT_FINALIZACAO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInscricao")
                        .HasColumnName("DAT_INSCRICAO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesafioId")
                        .HasColumnName("ID_DESAFIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Resultado")
                        .HasColumnName("DSC_RESULTADO")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_INSCRICAO");

                    b.HasIndex("CandidatoId");

                    b.HasIndex("DesafioId");

                    b.ToTable("INSCRICAO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Questao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_QUESTAO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DesafioId")
                        .HasColumnName("ID_DESAFIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DSC_QUESTAO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_QUESTAO");

                    b.HasIndex("DesafioId");

                    b.ToTable("QUESTAO");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Resposta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_RESPOSTA")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DAT_CADASTRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAlteracao")
                        .HasColumnName("DAT_ULTIMA_ALTERACAO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DSC_RESPOSTA")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("InscricaoId")
                        .HasColumnName("ID_INSCRICAO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessoCadastro")
                        .IsRequired()
                        .HasColumnName("NOM_PROCESSO_CADASTRO")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<Guid>("QuestaoId")
                        .HasColumnName("ID_QUESTAO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCadastroId")
                        .HasColumnName("ID_USUARIO_CADASTRO")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID_RESPOSTA");

                    b.HasIndex("InscricaoId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("RESPOSTA");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Avaliacao", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Funcionario", "Funcionario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("FuncionarioId")
                        .IsRequired();

                    b.HasOne("Mamba.Domain.Entities.Resposta", "Resposta")
                        .WithOne("Avaliacao")
                        .HasForeignKey("Mamba.Domain.Entities.Avaliacao", "RespostaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Candidato", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Candidatos")
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired();

                    b.HasOne("Mamba.Domain.Entities.Endereco", "Endereco")
                        .WithOne("Candidato")
                        .HasForeignKey("Mamba.Domain.Entities.Candidato", "EnderecoId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Cargo", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Cargos")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Desafio", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Cargo", "Cargo")
                        .WithMany("Desafios")
                        .HasForeignKey("CargoId");

                    b.HasOne("Mamba.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Desafios")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Empresa", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Endereco", "Endereco")
                        .WithOne("Empresa")
                        .HasForeignKey("Mamba.Domain.Entities.Empresa", "EnderecoId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Funcionario", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Funcionarios")
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired();

                    b.HasOne("Mamba.Domain.Entities.Cargo", "Cargo")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CargoId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Inscricao", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Candidato", "Candidato")
                        .WithMany("Inscricoes")
                        .HasForeignKey("CandidatoId")
                        .IsRequired();

                    b.HasOne("Mamba.Domain.Entities.Desafio", "Desafio")
                        .WithMany("Inscricoes")
                        .HasForeignKey("DesafioId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Questao", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Desafio", "Desafio")
                        .WithMany("Questoes")
                        .HasForeignKey("DesafioId")
                        .IsRequired();
                });

            modelBuilder.Entity("Mamba.Domain.Entities.Resposta", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.Inscricao", "Inscricao")
                        .WithMany("Respostas")
                        .HasForeignKey("InscricaoId")
                        .IsRequired();

                    b.HasOne("Mamba.Domain.Entities.Questao", "Questao")
                        .WithMany("Respostas")
                        .HasForeignKey("QuestaoId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mamba.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Mamba.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
